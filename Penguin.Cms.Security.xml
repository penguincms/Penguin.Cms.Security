<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penguin.Cms.Security</name>
    </assembly>
    <members>
        <member name="T:Penguin.Cms.Security.AuthenticationToken">
            <summary>
            A token intended to serve as a temporary login for API access, or password resets
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.AuthenticationToken.Expiration">
            <summary>
            When this token will expire
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.AuthenticationToken.User">
            <summary>
            Guid representing the user this token is tied to
            </summary>
        </member>
        <member name="T:Penguin.Cms.Security.Constants.Groups">
            <summary>
            Used to access typed instances of system groups
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Groups.AllUsers">
            <summary>
            This group is the base for all site users
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Groups.Guest">
            <summary>
            This group contains users that are not logged in
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Groups.LoggedIn">
            <summary>
            This group contains users that are not logged in
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Groups.SysAdmins">
            <summary>
            This group is grants access to all aspects of the web site
            </summary>
        </member>
        <member name="T:Penguin.Cms.Security.Constants.Roles">
            <summary>
            Used to access typed instances of system roles
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Roles.AdminAccess">
            <summary>
            This role allows a user or group to access the administration panel
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Roles.AllUsers">
            <summary>
            This role is the base for all site users
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Roles.Guest">
            <summary>
            This role represents users that are not logged in
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Roles.LoggedIn">
            <summary>
            This role represents users that are logged in
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Roles.SysAdmin">
            <summary>
            This Role is grants access to all aspects of the web site
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Roles.UserManager">
            <summary>
            This role allows access to functions that control other users
            </summary>
        </member>
        <member name="T:Penguin.Cms.Security.Constants.Strings.Roles.Descriptions">
            <summary>
            Hardcoded descriptions for default roles
            </summary>
        </member>
        <member name="T:Penguin.Cms.Security.Constants.Strings.GroupStrings">
            <summary>
            Contains static variables for generating and referencing Groups
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Strings.GroupStrings.AllUsers">
            <summary>
            This group is the base for all site users
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Strings.GroupStrings.Guest">
            <summary>
            This group contains users that are not logged in
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Strings.GroupStrings.LoggedIn">
            <summary>
            This group represents users that are logged in
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Strings.GroupStrings.SysAdmin">
            <summary>
            This group is grants access to all aspects of the web site
            </summary>
        </member>
        <member name="T:Penguin.Cms.Security.Constants.Strings.RoleStrings">
            <summary>
            Contains static variables for generating and referencing roles
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Strings.RoleStrings.AdminAccess">
            <summary>
            This role allows a user or group to access the administration panel
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Strings.RoleStrings.AllUsers">
            <summary>
            This role is the base for all site users
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Strings.RoleStrings.Guest">
            <summary>
            This role represents users that are not logged in
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Strings.RoleStrings.LoggedIn">
            <summary>
            This role represents users that are logged in
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Strings.RoleStrings.SysAdmin">
            <summary>
            This role is grants access to all aspects of the web site
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Strings.RoleStrings.UserManager">
            <summary>
            This role allows access to functions that control other users
            </summary>
        </member>
        <member name="T:Penguin.Cms.Security.Constants.Strings.UserStrings">
            <summary>
            Contains static variables for generating and referencing default users
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Strings.UserStrings.Admin">
            <summary>
            This group is the base for all site users
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Strings.UserStrings.Guest">
            <summary>
            This group is grants access to all aspects of the web site
            </summary>
        </member>
        <member name="T:Penguin.Cms.Security.Constants.Users">
            <summary>
            Used to access typed instances of system users
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Users.Admin">
            <summary>
            The default system administrator log in for the system
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Constants.Users.Guest">
            <summary>
            The default system administrator log in for the system
            </summary>
        </member>
        <member name="T:Penguin.Cms.Security.EmailValidationToken">
            <summary>
            Used to track whether or not a user has validated their email
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.EmailValidationToken.Creator">
            <summary>
            The Guid of the user that created this token
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.EmailValidationToken.IsValidated">
            <summary>
            True if the user has validated this token by clicking the link in their email
            </summary>
        </member>
        <member name="T:Penguin.Cms.Security.EntityPermissions">
            <summary>
            An object that tracks permissions for entities
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.EntityPermissions._Id">
            <inheritdoc />
        </member>
        <member name="P:Penguin.Cms.Security.EntityPermissions.AddPermissions">
            <summary>
            Setting this object adds the defined permissions to the underlying collection.
            This exists to allow for inline-defining new object permissions without needing to worry
            about blowing away existing permissions if the object already exists
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.EntityPermissions.EntityGuid">
            <summary>
            The Guid for the entity being referenced
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.EntityPermissions.Permissions">
            <summary>
            A list of permission definitions applied to this object
            </summary>
        </member>
        <member name="M:Penguin.Cms.Security.EntityPermissions.#ctor">
            <summary>
            Constructs a new instance of a permissionable entity and initializes the permissions list
            </summary>
        </member>
        <member name="M:Penguin.Cms.Security.EntityPermissions.AddPermission(Penguin.Cms.Security.SecurityGroup,Penguin.Security.Abstractions.PermissionTypes)">
            <summary>
            Adds a new access type for a given security group
            </summary>
            <param name="securityGroup">The security group to give access to</param>
            <param name="permission">The type of access to allow</param>
        </member>
        <member name="M:Penguin.Cms.Security.EntityPermissions.ShouldSerializePermissions">
            <summary>
            When using newtonsoft, this ensures that entity permissions are not passed over with the entity if its serialized
            This would be a security vulnerability since user/group information might be passed forward
            </summary>
            <returns>False</returns>
        </member>
        <member name="M:Penguin.Cms.Security.Extensions.GroupRoleRepositoryExtensions.GetByName``1(Penguin.Persistence.Abstractions.Interfaces.IRepository{``0},System.String)">
            <summary>
            Gets a group or role by name
            </summary>
            <param name="repository"></param>
            <param name="Name">The name to check for</param>
            <returns>The group/role or null</returns>
        </member>
        <member name="M:Penguin.Cms.Security.Extensions.GroupRoleRepositoryExtensions.GetDefaults``1(Penguin.Persistence.Abstractions.Interfaces.IRepository{``0})">
            <summary>
            Gets any groups/roles that are set to be assigned to all new users
            </summary>
            <returns>Any groups/roles that are set to be assigned to all new users</returns>
        </member>
        <member name="M:Penguin.Cms.Security.Extensions.ProfileRepositoryExtensions.GetByLogin(Penguin.Persistence.Abstractions.Interfaces.IRepository{Penguin.Cms.Security.UserProfile},System.String)">
            <summary>
            Returns the user profile for a user with the requested login
            </summary>
            <param name="repository"></param>
            <param name="login">The login of the user that owns the profile</param>
            <returns>The users profile</returns>
        </member>
        <member name="M:Penguin.Cms.Security.Extensions.UserExtensions.AddGroup(Penguin.Cms.Security.User,Penguin.Cms.Security.Group)">
            <summary>
            Adds a group to the targets group list
            </summary>
            <param name="target">The target to add the group to</param>
            <param name="thisGroup">The group to add</param>
        </member>
        <member name="M:Penguin.Cms.Security.Extensions.UserExtensions.AddRole(Penguin.Cms.Security.User,Penguin.Cms.Security.Role)">
            <summary>
            Adds a role to the targets role list
            </summary>
            <param name="target">The target to add a role to</param>
            <param name="thisRole">The role to add</param>
        </member>
        <member name="M:Penguin.Cms.Security.Extensions.UserExtensions.AddRole(Penguin.Cms.Security.Group,Penguin.Cms.Security.Role)">
            <summary>
            Adds a role to the targets role list
            </summary>
            <param name="target">The target to add a role to</param>
            <param name="thisRole">The role to add</param>
        </member>
        <member name="M:Penguin.Cms.Security.Extensions.UserExtensions.RemoveGroup(Penguin.Cms.Security.User,Penguin.Cms.Security.Group)">
            <summary>
            Removes a specified group from the objects group list
            </summary>
            <param name="target">The object to remove the group from</param>
            <param name="thisGroup">The group to remove</param>
        </member>
        <member name="T:Penguin.Cms.Security.Generators.GenerateSecurity">
            <summary>
            Generates the default security users, groups, and roles
            </summary>
        </member>
        <member name="M:Penguin.Cms.Security.Generators.GenerateSecurity.Generate">
            <summary>
            Returns a list of default security users, groups, and roles
            </summary>
            <returns>An IEnumerable of default security users, groups, and roles</returns>
        </member>
        <member name="T:Penguin.Cms.Security.Group">
            <summary>
            Represents a collection of roles used to assign permissions
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Group.Roles">
            <summary>
            The roles granted to members of this group
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Group.Users">
            <summary>
            A virtual list of users assigned to this group
            </summary>
        </member>
        <member name="M:Penguin.Cms.Security.Group.#ctor">
            <summary>
            Creates a new instance of a group and initializes the role list
            </summary>
        </member>
        <member name="T:Penguin.Cms.Security.GroupRole">
            <summary>
            Base class for assignable permissions objects
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.GroupRole.IsDefault">
            <summary>
            Should this permission be assigned to all new users?
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.GroupRole.Name">
            <summary>
            Maps to the External ID
            </summary>
        </member>
        <member name="M:Penguin.Cms.Security.GroupRole.ToString">
            <summary>
            Returns the Name/ExternalId
            </summary>
            <returns>The Name/ExternalId</returns>
        </member>
        <member name="T:Penguin.Cms.Security.UserProfile">
            <summary>
            A data wrapper for custom user information attached to a used object
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.UserProfile.Fields">
            <summary>
            Contains a list of key value pair style objects with additional information for users
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.UserProfile.User">
            <summary>
            The user that this profile object applies to
            </summary>
        </member>
        <member name="M:Penguin.Cms.Security.UserProfile.GetData``1">
            <summary>
            Deserializes a concrete representation of a user profile from the fields attached to this object
            </summary>
            <typeparam name="T">A type representing a collection of user profile information</typeparam>
            <returns>The deserialized concrete user profile instance</returns>
        </member>
        <member name="M:Penguin.Cms.Security.UserProfile.SetData(System.Object)">
            <summary>
            Sets the ProfileData fields by reflecting over a concrete instance of a User Profile object
            </summary>
            <param name="data">The object to use as the data source from the fields</param>
        </member>
        <member name="T:Penguin.Cms.Security.ProfileData">
            <summary>
            A Key Value pair representing a single profile field
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.ProfileData.Name">
            <summary>
            The name of the field
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.ProfileData.Value">
            <summary>
            The value of the field
            </summary>
        </member>
        <member name="T:Penguin.Cms.Security.Role">
            <summary>
            The smallest unit of permission, representing the fundamental reason any group might need to access a resource
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Role.Groups">
            <summary>
            Virtual list of Groups that are directly assigned this role
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Role.Users">
            <summary>
            Virtual list of Users that are directly assigned this role
            </summary>
        </member>
        <member name="T:Penguin.Cms.Security.SecurityGroup">
            <summary>
            The most shared class for any object that can be given access to another object, including Roles, Groups, and Users
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.SecurityGroup.Description">
            <summary>
            What describes the use of this object?
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.SecurityGroup.Guid">
            <summary>
            The GUID for the group. Used for allowing access without needing to reference a specific instance of the object
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.SecurityGroup.Source">
            <summary>
            The source for the security group when it was created
            </summary>
        </member>
        <member name="T:Penguin.Cms.Security.SecurityGroup.SecurityGroupSource">
            <summary>
            Represents the a list of options for the source of this security group
            </summary>
        </member>
        <member name="F:Penguin.Cms.Security.SecurityGroup.SecurityGroupSource.System">
            <summary>
            The group was created by the system as part of its core functionality
            </summary>
        </member>
        <member name="F:Penguin.Cms.Security.SecurityGroup.SecurityGroupSource.Client">
            <summary>
            The group was created by the client to extend functionality
            </summary>
        </member>
        <member name="F:Penguin.Cms.Security.SecurityGroup.SecurityGroupSource.ActiveDirectory">
            <summary>
            The group was automatically pulled from Active Directory
            </summary>
        </member>
        <member name="M:Penguin.Cms.Security.SecurityGroup.op_Inequality(Penguin.Cms.Security.SecurityGroup,Penguin.Cms.Security.SecurityGroup)">
            <summary>
            Compares based on the type and the ExternalId
            </summary>
            <param name="obj1">The first object</param>
            <param name="obj2">The second object</param>
            <returns>If they are NOT equal</returns>
        </member>
        <member name="M:Penguin.Cms.Security.SecurityGroup.op_Equality(Penguin.Cms.Security.SecurityGroup,Penguin.Cms.Security.SecurityGroup)">
            <summary>
            Compares based on the type and the ExternalId
            </summary>
            <param name="obj1">The first object</param>
            <param name="obj2">The second object</param>
            <returns>If they are equal</returns>
        </member>
        <member name="M:Penguin.Cms.Security.SecurityGroup.Equals(System.Object)">
            <summary>
            Compares based on the type and the ExternalId
            </summary>
            <param name="obj">The object to compare to</param>
            <returns>If they are equal</returns>
        </member>
        <member name="M:Penguin.Cms.Security.SecurityGroup.GetHashCode">
            <summary>
            Hashes the Type and the External ID
            </summary>
            <returns>Hashes the Type and the External ID</returns>
        </member>
        <member name="M:Penguin.Cms.Security.SecurityGroup.ToString">
            <summary>
            Returns the ExternalId
            </summary>
            <returns>The ExternalId</returns>
        </member>
        <member name="T:Penguin.Cms.Security.SecurityGroupPermission">
            <summary>
            Represents a set of permissions to define a security groups access to any permissionable entity
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.SecurityGroupPermission.SecurityGroup">
            <summary>
            The security group that this permission applies to
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.SecurityGroupPermission.Type">
            <summary>
            Defines the type of access that the security group has to the permissionable entity
            </summary>
        </member>
        <member name="M:Penguin.Cms.Security.SecurityGroupPermission.#ctor(Penguin.Cms.Security.SecurityGroup,Penguin.Security.Abstractions.PermissionTypes)">
            <summary>
            Constructs a new instance of this class for the specified security group, using the specified access type
            </summary>
            <param name="securityGroup">The security group that this permission applies to </param>
            <param name="type">The type of access that the security group has to the permissionable entity</param>
        </member>
        <member name="M:Penguin.Cms.Security.SecurityGroupPermission.#ctor">
            <summary>
            Constructs an empty instance of this class
            </summary>
        </member>
        <member name="T:Penguin.Cms.Security.Services.UserService">
            <summary>
            This class provides basic CMS methods for managing and interacting with users
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Services.UserService.AuthenticationTokenRepository">
            <summary>
            An IRepository implementation for accessing authentication tokens
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.Services.UserService.EmailTemplateRepository">
            <summary>
            An email template repository
            </summary>
        </member>
        <member name="M:Penguin.Cms.Security.Services.UserService.#ctor(Penguin.Persistence.Abstractions.Interfaces.IRepository{Penguin.Cms.Security.User},Penguin.Email.Templating.Abstractions.Interfaces.ISendTemplates,Penguin.Persistence.Abstractions.Interfaces.IRepository{Penguin.Cms.Security.AuthenticationToken})">
            <summary>
            Constructs a new instance of this service
            </summary>
            <param name="userRepository">A user repository</param>
            <param name="emailTemplateRepository">An email template repository</param>
            <param name="authenticationTokenRepository">An IRepository implementation for accessing authentication tokens</param>
        </member>
        <member name="M:Penguin.Cms.Security.Services.UserService.GetByAuthenticationToken(Penguin.Cms.Security.AuthenticationToken)">
            <summary>
            Gets a user using any valid authentication token
            </summary>
            <param name="token">The token to use to get the user</param>
            <returns>A user if a the token is valid, otherwise null</returns>
        </member>
        <member name="M:Penguin.Cms.Security.Services.UserService.GetByAuthenticationToken(System.Guid)">
            <summary>
            Gets a user using any valid authentication token
            </summary>
            <param name="token">The token to use to get the user</param>
            <returns>A user if a the token is valid, otherwise null</returns>
        </member>
        <member name="M:Penguin.Cms.Security.Services.UserService.RequestPasswordReset(System.String)">
            <summary>
            Returns an authentication token that can be used to reset a password. If email templating is bundled, will send out a password reset email
            </summary>
            <param name="Login">The login for the user to request</param>
            <returns>Returns an authentication token that can be used to reset a password.</returns>
        </member>
        <member name="M:Penguin.Cms.Security.Services.UserService.RequestPasswordReset(Penguin.Cms.Security.User,System.Guid)">
            <summary>
            Returns an authentication token that can be used to reset a password. If email templating is bundled, will send out a password reset email
            </summary>
            <param name="targetUser">The login for the user to request</param>
            <param name="Token">Parameter only used by email templating system</param>
            <returns>Returns an authentication token that can be used to reset a password.</returns>
        </member>
        <member name="M:Penguin.Cms.Security.Services.UserService.SendLoginInformation(System.String)">
            <summary>
            If email templating is enabled, Sends the specified email a message containing the login name of any associated user account
            </summary>
            <param name="Email">The email to send information to</param>
        </member>
        <member name="M:Penguin.Cms.Security.Services.UserService.SendLoginInformation(Penguin.Cms.Security.User)">
            <summary>
            If email templating is enabled, Sends the specified email a message containing the login name of any associated user account
            </summary>
            <param name="targetUser">The user to send login information to</param>
        </member>
        <member name="T:Penguin.Cms.Security.User">
            <summary>
            Represents a collection of identifying information and security properties to allow a single person to be tracked and permissioned within a system
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.User.Email">
            <summary>
            A contact email for the user
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.User.Enabled">
            <summary>
            If enabled, the user should be allowed to access the system
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.User.FirstName">
            <summary>
            The users first name
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.User.Groups">
            <summary>
            A collection of groups that the user belongs to
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.User.HashedPassword">
            <summary>
            The post-hash password. Setting this will not alter the password in any way
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.User.LastName">
            <summary>
            The users last name
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.User.Login">
            <summary>
            A unique log in for the user, used to access the system
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.User.LoginAttempts">
            <summary>
            This item should increment every time a log in attempt is failed, and reset when sucessfull
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.User.Password">
            <summary>
            The password of the user, persisted as a hash. Setting this property will hash the password
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.User.Profile">
            <summary>
            A customizable collection of information not otherwise contained on this object
            </summary>
        </member>
        <member name="P:Penguin.Cms.Security.User.Roles">
            <summary>
            A list of roles directly assigned to the user to ensure access even through group changes
            </summary>
        </member>
        <member name="M:Penguin.Cms.Security.User.HashPassword(System.String)">
            <summary>
            The user password hashing function for use during authentication
            </summary>
            <param name="password">The password to hash</param>
            <returns>The hashed password</returns>
        </member>
    </members>
</doc>